/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OracleInterface extends utils.Interface {
  functions: {
    "getLpTokenPriceUsdc(address)": FunctionFragment;
    "getLpTokenTotalLiquidityUsdc(address)": FunctionFragment;
    "getPriceFromRouter(address,address)": FunctionFragment;
    "getPriceFromRouterUsdc(address)": FunctionFragment;
    "getPriceUsdc(address)": FunctionFragment;
    "getRouterForLpToken(address)": FunctionFragment;
    "isLpToken(address)": FunctionFragment;
    "primaryFactoryAddress()": FunctionFragment;
    "primaryRouterAddress()": FunctionFragment;
    "secondaryFactoryAddress()": FunctionFragment;
    "secondaryRouterAddress()": FunctionFragment;
    "usdcAddress()": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLpTokenPriceUsdc"
      | "getLpTokenTotalLiquidityUsdc"
      | "getPriceFromRouter"
      | "getPriceFromRouterUsdc"
      | "getPriceUsdc"
      | "getRouterForLpToken"
      | "isLpToken"
      | "primaryFactoryAddress"
      | "primaryRouterAddress"
      | "secondaryFactoryAddress"
      | "secondaryRouterAddress"
      | "usdcAddress"
      | "wethAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLpTokenPriceUsdc",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpTokenTotalLiquidityUsdc",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFromRouter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFromRouterUsdc",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceUsdc",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterForLpToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLpToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "primaryFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getLpTokenPriceUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpTokenTotalLiquidityUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFromRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFromRouterUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterForLpToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primaryFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLpTokenPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFromRouter(
      token0Address: PromiseOrValue<string>,
      token1Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFromRouterUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRouterForLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    primaryFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    primaryRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    secondaryFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    secondaryRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    usdcAddress(overrides?: CallOverrides): Promise<[string]>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  getLpTokenPriceUsdc(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLpTokenTotalLiquidityUsdc(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFromRouter(
    token0Address: PromiseOrValue<string>,
    token1Address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFromRouterUsdc(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceUsdc(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRouterForLpToken(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isLpToken(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  primaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

  primaryRouterAddress(overrides?: CallOverrides): Promise<string>;

  secondaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

  secondaryRouterAddress(overrides?: CallOverrides): Promise<string>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getLpTokenPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouter(
      token0Address: PromiseOrValue<string>,
      token1Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouterUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterForLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    primaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

    primaryRouterAddress(overrides?: CallOverrides): Promise<string>;

    secondaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

    secondaryRouterAddress(overrides?: CallOverrides): Promise<string>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;

    wethAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getLpTokenPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouter(
      token0Address: PromiseOrValue<string>,
      token1Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouterUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterForLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    primaryFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    primaryRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    secondaryFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    secondaryRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getLpTokenPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFromRouter(
      token0Address: PromiseOrValue<string>,
      token1Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFromRouterUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceUsdc(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterForLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLpToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    primaryFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    primaryRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondaryFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondaryRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
